#user  nobody; # 配置worker进程的权限，最高为配置为root
worker_processes  1; # 数目为cpu kernel的1/2倍
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
#error_log  "pipe:rollback logs/error_log interval=1d baknum=7 maxsize=2G";

#pid        logs/nginx.pid;


events {
  worker_connections  1024; # 一个worker进程可以处理的最大链接数目，通常创建的sockfd数量是大于这个数值的，这个fd个数数值是由
                            # 内核限制的（默认1024），所以当需求大于内核默认值的时候，就需要去就该的内核对于单进程的fd开启限制的放宽
                            # 通过ulimit -SHn n来修改每个进程允许的最大创建的fd数量
}


http {
  include       mime.types;
  default_type  application/octet-stream;

  # 配置日志的输出格式
  #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
  #                  '$status $body_bytes_sent "$http_referer" '
  #                  '"$http_user_agent" "$http_x_forwarded_for"';

  #access_log  logs/access.log  main;
  #access_log  "pipe:rollback logs/access_log interval=1d baknum=7 maxsize=2G"  main;


  sendfile        on; # 零拷贝直接内核中进行IO，不在有文件拷贝的用户态内核态的切换问题

  #tcp_nopush     on; # 开启或关闭unix上的TCP_NOPUSH，linux上的TCP_CORK， off 等到数据包阻塞到最大时才发送

  #keepalive_timeout  0;
  keepalive_timeout  65;  # 保持http的连接

  # tcp_nodelay on; # 开启或关闭nginx使用TCP_NODELAY,on就是关闭nagle算法，就是对于数据包不采用停等式

  #gzip  on; # 压缩返回内容

  server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;

    #access_log  logs/host.access.log  main;
    #access_log  "pipe:rollback logs/host.access_log interval=1d baknum=7 maxsize=2G"  main;

    location / {
      root   html;
      index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # pass the Dubbo rpc to Dubbo provider server listening on 127.0.0.1:20880
    #
    #location /dubbo {
    #    dubbo_pass_all_headers on;
    #    dubbo_pass_set args $args;
    #    dubbo_pass_set uri $uri;
    #    dubbo_pass_set method $request_method;
    #
    #    dubbo_pass org.apache.dubbo.samples.tengine.DemoService 0.0.0 tengineDubbo dubbo_backend;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
  }

  # upstream for Dubbo rpc to Dubbo provider server listening on 127.0.0.1:20880
  #
  #upstream dubbo_backend {
  #    multi 1;
  #    server 127.0.0.1:20880;
  #}

  # another virtual host using mix of IP-, name-, and port-based configuration
  #
  #server {
  #    listen       8000;
  #    listen       somename:8080;
  #    server_name  somename  alias  another.alias;

  #    location / {
  #        root   html;
  #        index  index.html index.htm;
  #    }
  #}


  # HTTPS server
  #
  #server {
  #    listen       443 ssl;
  #    server_name  localhost;

  #    ssl_certificate      cert.pem;
  #    ssl_certificate_key  cert.key;

  #    ssl_session_cache    shared:SSL:1m;
  #    ssl_session_timeout  5m;

  #    ssl_ciphers  HIGH:!aNULL:!MD5;
  #    ssl_prefer_server_ciphers  on;

  #    location / {
  #        root   html;
  #        index  index.html index.htm;
  #    }
  #}

}
